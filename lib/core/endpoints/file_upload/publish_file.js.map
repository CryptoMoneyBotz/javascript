{"version":3,"sources":["core/endpoints/file_upload/publish_file.js"],"names":["preparePayload","payload","crypto","config","stringifiedPayload","JSON","stringify","cipherKey","encrypt","endpoint","getOperation","operationConstants","PNPublishFileOperation","validateParams","_","params","channel","getURL","modules","publishKey","subscribeKey","message","getRequestTimeout","getTransactionTimeout","isAuthSupported","getAuthToken","tokenManager","getToken","prepareParams","handleResponse","response","timetoken"],"mappings":";;;;;;;;;AAGA;;AAGA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,OAA8BC,OAA9B,EAAuD;AAAA,MAApDC,MAAoD,QAApDA,MAAoD;AAAA,MAA5CC,MAA4C,QAA5CA,MAA4C;AAC5E,MAAIC,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAAzB;;AAEA,MAAIE,MAAM,CAACI,SAAX,EAAsB;AACpBH,IAAAA,kBAAkB,GAAGF,MAAM,CAACM,OAAP,CAAeJ,kBAAf,CAArB;AACAA,IAAAA,kBAAkB,GAAGC,IAAI,CAACC,SAAL,CAAeF,kBAAf,CAArB;AACD;;AAED,SAAOA,kBAAP;AACD,CATD;;AAWA,IAAMK,QAA8D,GAAG;AACrEC,EAAAA,YAAY,EAAE;AAAA,WAAMC,uBAAmBC,sBAAzB;AAAA,GADuD;AAGrEC,EAAAA,cAAc,EAAE,wBAACC,CAAD,EAAIC,MAAJ,EAAe;AAC7B,QAAI,EAACA,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEC,OAAT,CAAJ,EAAsB;AACpB,aAAO,wBAAP;AACD;AACF,GAPoE;AASrEC,EAAAA,MAAM,EAAE,gBAACC,OAAD,EAAUH,MAAV,EAAqB;AAAA,0BACUG,OAAO,CAACf,MADlB;AAAA,QACnBgB,UADmB,mBACnBA,UADmB;AAAA,QACPC,YADO,mBACPA,YADO;AAE3B,QAAMnB,OAAO,GAAGD,cAAc,CAACkB,OAAD,EAAUH,MAAM,CAACM,OAAjB,CAA9B;AAEA,4CAAiCF,UAAjC,cAA+CC,YAA/C,gBAAiEL,MAAM,CAACC,OAAxE,gBAAqFf,OAArF;AACD,GAdoE;AAgBrEqB,EAAAA,iBAAiB,EAAE;AAAA,QAAGnB,MAAH,SAAGA,MAAH;AAAA,WAAgBA,MAAM,CAACoB,qBAAP,EAAhB;AAAA,GAhBkD;AAkBrEC,EAAAA,eAAe,EAAE;AAAA,WAAM,IAAN;AAAA,GAlBoD;AAoBrEC,EAAAA,YAAY,EAAE;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WAAsBA,YAAY,CAACC,QAAb,CAAsB,YAAtB,CAAtB;AAAA,GApBuD;AAsBrEC,EAAAA,aAAa,EAAE;AAAA,WAAO,EAAP;AAAA,GAtBsD;AAwBrEC,EAAAA,cAAc,EAAE,wBAACf,CAAD,EAAIgB,QAAJ;AAAA,WAAqC;AACnDC,MAAAA,SAAS,EAAED,QAAQ,CAAC,GAAD;AADgC,KAArC;AAAA;AAxBqD,CAAvE;eA6BerB,Q","sourcesContent":["/** @flow */\n\nimport type { EndpointConfig, Modules } from '../endpoint';\nimport operationConstants from '../../constants/operations';\nimport type { PublishFileParams, PublishFileResult } from './types';\n\nconst preparePayload = ({ crypto, config }: Modules, payload: any): string => {\n  let stringifiedPayload = JSON.stringify(payload);\n\n  if (config.cipherKey) {\n    stringifiedPayload = crypto.encrypt(stringifiedPayload);\n    stringifiedPayload = JSON.stringify(stringifiedPayload);\n  }\n\n  return stringifiedPayload;\n};\n\nconst endpoint: EndpointConfig<PublishFileParams, PublishFileResult> = {\n  getOperation: () => operationConstants.PNPublishFileOperation,\n\n  validateParams: (_, params) => {\n    if (!params?.channel) {\n      return \"channel can't be empty\";\n    }\n  },\n\n  getURL: (modules, params) => {\n    const { publishKey, subscribeKey } = modules.config;\n    const payload = preparePayload(modules, params.message);\n\n    return `/v1/files/publish-file/${publishKey}/${subscribeKey}/0/${params.channel}/0/${payload}`;\n  },\n\n  getRequestTimeout: ({ config }) => config.getTransactionTimeout(),\n\n  isAuthSupported: () => true,\n\n  getAuthToken: ({ tokenManager }) => tokenManager.getToken('fileUpload'),\n\n  prepareParams: () => ({}),\n\n  handleResponse: (_, response): PublishFileResult => ({\n    timetoken: response['2'],\n  }),\n};\n\nexport default endpoint;\n"],"file":"publish_file.js"}