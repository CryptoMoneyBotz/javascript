{"version":3,"sources":["core/endpoints/file_upload/send_file.js"],"names":["sendFile","generateUploadUrl","publishFile","modules","channel","input","file","message","PubNubError","getFile","create","name","file_upload_request","url","formFields","form_fields","data","id","networking","FILE","res","status","Error","deps","f","params","cb","resultP","then","result","error"],"mappings":";;;;;;;;;;;;;AAEA;;AAkBA,IAAMA,QAAQ,GAAG,SAAXA,QAAW;AAAA,MAAGC,iBAAH,QAAGA,iBAAH;AAAA,MAAsBC,WAAtB,QAAsBA,WAAtB;AAAA,MAAmCC,OAAnC,QAAmCA,OAAnC;AAAA;AAAA,gFAA+D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC9EC,cAAAA,OAD8E,SAC9EA,OAD8E,EAExEC,KAFwE,SAE9EC,IAF8E,EAG9EC,OAH8E,SAG9EA,OAH8E;;AAAA,kBAKzEH,OALyE;AAAA;AAAA;AAAA;;AAAA,oBAMtE,IAAII,qBAAJ,CACJ,6CADI,EAEJ,qCAAsB,wBAAtB,CAFI,CANsE;;AAAA;AAAA,kBAYzEH,KAZyE;AAAA;AAAA;AAAA;;AAAA,oBAatE,IAAIG,qBAAJ,CACJ,6CADI,EAEJ,qCAAsB,qBAAtB,CAFI,CAbsE;;AAAA;AAmBxEF,cAAAA,IAnBwE,GAmBjEH,OAAO,CAACM,OAAR,GAAkBC,MAAlB,CAAyBL,KAAzB,CAnBiE;AAAA;AAAA,qBAwBpEJ,iBAAiB,CAAC;AAAEG,gBAAAA,OAAO,EAAPA,OAAF;AAAWO,gBAAAA,IAAI,EAAEL,IAAI,CAACK;AAAtB,eAAD,CAxBmD;;AAAA;AAAA;AAAA,4CAsB5EC,mBAtB4E;AAsBrDC,cAAAA,GAtBqD,yBAsBrDA,GAtBqD;AAsBnCC,cAAAA,UAtBmC,yBAsBhDC,WAtBgD;AAAA,iCAuB5EC,IAvB4E;AAuBpEC,cAAAA,EAvBoE,cAuBpEA,EAvBoE;AAuBhEN,cAAAA,IAvBgE,cAuBhEA,IAvBgE;AAAA;AAAA,qBA0B5DR,OAAO,CAACe,UAAR,CAAmBC,IAAnB,CAAwBN,GAAxB,EAA6BC,UAA7B,EAAyCR,IAAI,CAACD,KAA9C,CA1B4D;;AAAA;AA0BxEe,cAAAA,GA1BwE;;AAAA,oBA4B1EA,GAAG,CAACC,MAAJ,KAAe,GA5B2D;AAAA;AAAA;AAAA;;AAAA,oBA6BtE,IAAIC,KAAJ,CAAU,eAAV,CA7BsE;;AAAA;AAAA;AAAA,qBAgCxEpB,WAAW,CAAC;AAChBE,gBAAAA,OAAO,EAAPA,OADgB;AAEhBG,gBAAAA,OAAO,EAAE;AACPA,kBAAAA,OAAO,EAAPA,OADO;AAEPD,kBAAAA,IAAI,EAAE;AACJW,oBAAAA,EAAE,EAAFA,EADI;AAEJN,oBAAAA,IAAI,EAAJA;AAFI;AAFC;AAFO,eAAD,CAhC6D;;AAAA;AAAA,+CA2CvE;AACLM,gBAAAA,EAAE,EAAFA,EADK;AAELN,gBAAAA,IAAI,EAAJA;AAFK,eA3CuE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/D;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB;;eAiDe,kBAACY,IAAD,EAAwB;AACrC,MAAMC,CAAC,GAAGxB,QAAQ,CAACuB,IAAD,CAAlB;AAEA,SAAO,UACLE,MADK,EAELC,EAFK,EAGuB;AAC5B,QAAMC,OAAO,GAAGH,CAAC,CAACC,MAAD,CAAjB;;AAEA,QAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;AAC5BC,MAAAA,OAAO,CAACC,IAAR,CAAa,UAACC,MAAD;AAAA,eAAYH,EAAE,CAAC,IAAD,EAAOG,MAAP,CAAd;AAAA,OAAb,WAAiD,UAACC,KAAD;AAAA,eAAWJ,EAAE,CAACI,KAAD,EAAS,IAAT,CAAb;AAAA,OAAjD;AAEA,aAAOH,OAAP;AACD,KAJD,MAIO;AACL,aAAOA,OAAP;AACD;AACF,GAbD;AAcD,C","sourcesContent":["/** @flow */\n\nimport { PubNubError, createValidationError } from '../../components/endpoint';\nimport type {\n  SendFileParams,\n  SendFileResult,\n  GenerateUploadUrlParams,\n  GenerateUploadUrlResult,\n  PublishFileParams,\n  PublishFileResult,\n} from './types';\n\nimport type { Modules } from '../endpoint';\n\ntype Dependencies = {|\n  generateUploadUrl: (params: GenerateUploadUrlParams) => Promise<GenerateUploadUrlResult>,\n  publishFile: (params: PublishFileParams) => Promise<PublishFileResult>,\n  modules: Modules,\n|};\n\nconst sendFile = ({ generateUploadUrl, publishFile, modules }: Dependencies) => async ({\n  channel,\n  file: input,\n  message,\n}: SendFileParams): Promise<SendFileResult> => {\n  if (!channel) {\n    throw new PubNubError(\n      'Validation failed, check status for details',\n      createValidationError(\"channel can't be empty\")\n    );\n  }\n\n  if (!input) {\n    throw new PubNubError(\n      'Validation failed, check status for details',\n      createValidationError(\"file can't be empty\")\n    );\n  }\n\n  const file = modules.getFile().create(input);\n\n  const {\n    file_upload_request: { url, form_fields: formFields },\n    data: { id, name },\n  } = await generateUploadUrl({ channel, name: file.name });\n\n  const res = await modules.networking.FILE(url, formFields, file.input);\n\n  if (res.status !== 204) {\n    throw new Error('upload failed');\n  }\n\n  await publishFile({\n    channel,\n    message: {\n      message,\n      file: {\n        id,\n        name,\n      },\n    },\n  });\n\n  return {\n    id,\n    name,\n  };\n};\n\nexport default (deps: Dependencies) => {\n  const f = sendFile(deps);\n\n  return (\n    params: SendFileParams,\n    cb?: (error: any, params: SendFileResult) => void\n  ): Promise<SendFileResult> => {\n    const resultP = f(params);\n\n    if (typeof cb === 'function') {\n      resultP.then((result) => cb(null, result)).catch((error) => cb(error, (null: any)));\n\n      return resultP;\n    } else {\n      return resultP;\n    }\n  };\n};\n"],"file":"send_file.js"}