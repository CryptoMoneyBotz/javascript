{"version":3,"sources":["node/file.js"],"names":["PubNubFile","input","Buffer","Promise","resolve","from","Readable","stream","reject","chunks","on","chunk","push","once","concat","Error","encoding","toBuffer","buffer","toString","inputType","PassThrough","pipe","config","data","name","mimeType","ReadStream","path","undefined"],"mappings":"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","sourcesContent":["/** @flow */\n\nimport { lookup } from 'mime-types';\n\nimport { Readable, PassThrough } from 'stream';\nimport { ReadStream } from 'fs';\nimport { basename } from 'path';\n\nimport { IFile, FileClass } from '../core/components/file';\n\ntype PubNubFileNodeConstructor = {|\n  stream?: Readable,\n  buffer?: Buffer,\n  data?: string,\n  encoding?: string,\n  name?: string,\n  mimeType?: string,\n|};\n\ntype PubNubFileNodeSupportedInputTypeType = 'stream' | 'buffer' | 'string';\ntype PubNubFileNodeSupportedInputType = Readable | Buffer | string;\n\nconst PubNubFile: FileClass = class PubNubFile implements IFile {\n  static supportsFile = false;\n  static supportsBuffer = typeof Buffer !== 'undefined';\n  static supportsStream = true;\n  static supportsString = true;\n\n  input: PubNubFileNodeSupportedInputType;\n  inputType: PubNubFileNodeSupportedInputTypeType;\n\n  name: string;\n  mimeType: string;\n\n  toBuffer(): Promise<Buffer> {\n    if (this.input instanceof Buffer) {\n      return Promise.resolve(Buffer.from(this.input));\n    }\n\n    if (this.input instanceof Readable) {\n      const stream = this.input;\n      return new Promise((resolve, reject) => {\n        const chunks = [];\n\n        stream.on('data', (chunk) => chunks.push(chunk));\n        stream.once('error', reject);\n        stream.once('end', () => {\n          resolve(Buffer.concat(chunks));\n        });\n      });\n    }\n\n    if (typeof this.input === 'string') {\n      return Promise.resolve(Buffer.from(this.input));\n    }\n\n    throw new Error(\"Can't cast to 'buffer'.\");\n  }\n\n  async toString(encoding: buffer$NonBufferEncoding = 'utf8') {\n    const buffer = await this.toBuffer();\n\n    return buffer.toString(encoding);\n  }\n\n  async toStream() {\n    if (this.inputType !== 'stream') {\n      throw new Error(`Can't cast from '${this.inputType}' to 'stream'.`);\n    }\n\n    const stream = new PassThrough();\n\n    if (this.input instanceof Readable) {\n      this.input.pipe(stream);\n    }\n\n    return stream;\n  }\n\n  async toFile() {\n    throw new Error('This feature is only supported in browser environments.');\n  }\n\n  static create(config: PubNubFileNodeConstructor) {\n    return new this(config);\n  }\n\n  constructor({ stream, buffer, data, encoding, name, mimeType }: PubNubFileNodeConstructor) {\n    if (stream instanceof Readable) {\n      if (stream instanceof ReadStream) {\n        // $FlowFixMe: incomplete flow node definitions\n        this.name = basename(stream.path);\n        // $FlowFixMe: incomplete flow node definitions\n        this.mimeType = lookup(stream.path);\n      }\n\n      this.inputType = 'stream';\n      this.input = stream;\n    }\n\n    if (buffer instanceof Buffer) {\n      this.inputType = 'buffer';\n      this.input = buffer;\n    }\n\n    if (typeof data === 'string') {\n      this.inputType = 'buffer';\n\n      // $FlowFixMe: incomplete flow node definitions\n      this.input = Buffer.from(data, encoding ?? 'utf8');\n    }\n\n    if (name) {\n      this.name = basename(name);\n      this.mimeType = lookup(name);\n    }\n\n    if (mimeType) {\n      this.mimeType = mimeType;\n    }\n\n    if (this.input === undefined) {\n      throw new Error(\"Couldn't construct a file out of supplied options.\");\n    }\n\n    if (this.name === undefined) {\n      throw new Error(\"Couldn't guess filename out of the options. Please provide one.\");\n    }\n  }\n};\n\nexport default PubNubFile;\n"],"file":"file.js"}